//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerOutSide"",
            ""id"": ""6085e0ac-ca5a-4399-95f6-3754e1a7db7a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""19bcb806-74bf-4555-9af6-a33be7a7db4c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""bca82e77-562a-44cd-9479-668b5f145444"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""171dea4b-574a-4f12-9e9c-11a45f8ff71c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e81d359d-579a-4c37-9959-4e644ed0fec4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""02e43231-1abb-41b7-bbdb-cbcb519ce652"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bab0a243-1960-4a42-a403-a1e1557c33f0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""edd932b0-4375-4f25-a9f6-5686caba9c76"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e1de1956-e8cb-45af-8666-8b4c7684d2d7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9321233b-f5d7-40e1-8251-f6baf6faa270"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""51852149-4b62-4cac-a4fa-42a6be60c441"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""00a1e9c8-2741-46ce-bfb2-fefd867e8e33"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b8a05b4a-5a2a-4313-a99f-0a685f092863"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0247d5c4-ad3a-462b-8ffc-069abda371fb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f70cb77f-297b-4230-8b19-e91e1d1041cc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bb9f09a3-bc42-4e32-9ae3-daf2f8cc8ac3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""646a4df2-67d7-464c-9a61-c70a12cf9781"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d1f936a-399d-4725-9593-20011a1380a4"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c43be297-873a-49c9-85c5-413b249e7c7f"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c84d169c-4a64-4ebf-b763-e4fe124a7698"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efbf5143-6aa1-4581-8b7c-36ff0922eb6d"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b479cf9-032e-4215-8594-f54c4853ad82"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cf926b5-9453-434a-b33c-c18eb1209668"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0308ad01-709e-4350-926b-865fead9768e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""021d8d8f-95d3-4b95-a3b2-3a027c07b9d2"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInHouse"",
            ""id"": ""d22bdda7-95a3-41d2-afce-e4e7639fb7c9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8a94c48d-6df2-4404-a47d-81a6c50efa0c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""dc896567-0465-4f60-9857-eb946c372405"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractAlternate"",
                    ""type"": ""Button"",
                    ""id"": ""c02a0a8a-2076-4477-82a5-89cf0d1fc995"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""28e1d44e-db10-414a-a040-44cbb7366ef7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""1d8379d7-ecdf-474e-b45b-c19cde066cd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""140c49ac-ab95-468c-84a2-8cc977d80724"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d92d531a-fca1-40e7-9d4e-40e04a380c7b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5b874934-7333-4490-9104-41bf2a5253c5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""28747a25-84d6-4809-bec2-b991f44638c8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f6d26ccb-7cc0-42cb-935f-13578527d3b8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""47e15a4d-e7e4-49f6-ae33-e789f94bb353"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""22d95d00-b4a0-4d12-ac6e-87b1342120a7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""49e4e465-2d9d-4815-9688-55532f67bd40"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""97549e76-5bc3-49b6-a382-e96e26920452"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""353abc5c-ff8b-4b59-b46f-8bc2601e7651"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f387d6bb-de8b-4522-8717-88dd7ec23719"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ba94e7a-a1c7-4521-845a-aab5b355bd9d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35ceece7-7799-4a85-8651-4a068c55f9c6"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d29660f8-be73-4a50-9560-0922241d8438"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InteractAlternate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce8127d4-41ba-4ad2-8c90-e35d97d5ba2f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""InteractAlternate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""756a3bba-2d9e-4c87-b541-8b67a0e8f2e3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98a28c44-1734-4752-b886-aa026a70d773"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""030c82ee-218c-4890-ab16-364965530aef"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b967a24-e07c-40e7-b93c-56d64c14d8d4"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerHitMinigame"",
            ""id"": ""bc21ddb7-092b-432e-bc7c-8c419da712e1"",
            ""actions"": [
                {
                    ""name"": ""Hit1"",
                    ""type"": ""Button"",
                    ""id"": ""67e3ad79-fe2e-4bcf-b96a-76909633b7a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hit2"",
                    ""type"": ""Button"",
                    ""id"": ""6a0e4f70-1b4f-4e39-b460-4904324e9ce6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hit3"",
                    ""type"": ""Button"",
                    ""id"": ""7c4a1f69-3857-4da8-ae41-874630f243ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hit4"",
                    ""type"": ""Button"",
                    ""id"": ""fe7cc9b5-036a-4ad7-a38c-e82501a8d674"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""677c71eb-d9b3-4045-8c21-122370659652"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Hit1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ddd6af7-4398-425e-a7dd-d53608890713"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Hit1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e917b8d-4875-4b43-bfb6-36a89114ee0d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Hit2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5323e70-a7ff-4e3e-a3ff-771472ae7791"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Hit2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5d1ca4f-e39b-402c-8aa0-d32eadd8e453"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Hit3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f50395e7-7e7a-4b2d-a0a1-2179e6b2b356"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Hit3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f68f354-57dc-4a3d-bcc3-a28e679c152c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Hit4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28f2aba4-06f7-47e2-b292-8c0344990181"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Hit4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerOutSide
        m_PlayerOutSide = asset.FindActionMap("PlayerOutSide", throwIfNotFound: true);
        m_PlayerOutSide_Move = m_PlayerOutSide.FindAction("Move", throwIfNotFound: true);
        m_PlayerOutSide_Interact = m_PlayerOutSide.FindAction("Interact", throwIfNotFound: true);
        m_PlayerOutSide_Run = m_PlayerOutSide.FindAction("Run", throwIfNotFound: true);
        m_PlayerOutSide_Jump = m_PlayerOutSide.FindAction("Jump", throwIfNotFound: true);
        m_PlayerOutSide_Pause = m_PlayerOutSide.FindAction("Pause", throwIfNotFound: true);
        // PlayerInHouse
        m_PlayerInHouse = asset.FindActionMap("PlayerInHouse", throwIfNotFound: true);
        m_PlayerInHouse_Move = m_PlayerInHouse.FindAction("Move", throwIfNotFound: true);
        m_PlayerInHouse_Interact = m_PlayerInHouse.FindAction("Interact", throwIfNotFound: true);
        m_PlayerInHouse_InteractAlternate = m_PlayerInHouse.FindAction("InteractAlternate", throwIfNotFound: true);
        m_PlayerInHouse_Dash = m_PlayerInHouse.FindAction("Dash", throwIfNotFound: true);
        m_PlayerInHouse_Pause = m_PlayerInHouse.FindAction("Pause", throwIfNotFound: true);
        // PlayerHitMinigame
        m_PlayerHitMinigame = asset.FindActionMap("PlayerHitMinigame", throwIfNotFound: true);
        m_PlayerHitMinigame_Hit1 = m_PlayerHitMinigame.FindAction("Hit1", throwIfNotFound: true);
        m_PlayerHitMinigame_Hit2 = m_PlayerHitMinigame.FindAction("Hit2", throwIfNotFound: true);
        m_PlayerHitMinigame_Hit3 = m_PlayerHitMinigame.FindAction("Hit3", throwIfNotFound: true);
        m_PlayerHitMinigame_Hit4 = m_PlayerHitMinigame.FindAction("Hit4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOutSide
    private readonly InputActionMap m_PlayerOutSide;
    private List<IPlayerOutSideActions> m_PlayerOutSideActionsCallbackInterfaces = new List<IPlayerOutSideActions>();
    private readonly InputAction m_PlayerOutSide_Move;
    private readonly InputAction m_PlayerOutSide_Interact;
    private readonly InputAction m_PlayerOutSide_Run;
    private readonly InputAction m_PlayerOutSide_Jump;
    private readonly InputAction m_PlayerOutSide_Pause;
    public struct PlayerOutSideActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerOutSideActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerOutSide_Move;
        public InputAction @Interact => m_Wrapper.m_PlayerOutSide_Interact;
        public InputAction @Run => m_Wrapper.m_PlayerOutSide_Run;
        public InputAction @Jump => m_Wrapper.m_PlayerOutSide_Jump;
        public InputAction @Pause => m_Wrapper.m_PlayerOutSide_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOutSide; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOutSideActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerOutSideActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerOutSideActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerOutSideActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayerOutSideActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayerOutSideActions instance)
        {
            if (m_Wrapper.m_PlayerOutSideActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerOutSideActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerOutSideActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerOutSideActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerOutSideActions @PlayerOutSide => new PlayerOutSideActions(this);

    // PlayerInHouse
    private readonly InputActionMap m_PlayerInHouse;
    private List<IPlayerInHouseActions> m_PlayerInHouseActionsCallbackInterfaces = new List<IPlayerInHouseActions>();
    private readonly InputAction m_PlayerInHouse_Move;
    private readonly InputAction m_PlayerInHouse_Interact;
    private readonly InputAction m_PlayerInHouse_InteractAlternate;
    private readonly InputAction m_PlayerInHouse_Dash;
    private readonly InputAction m_PlayerInHouse_Pause;
    public struct PlayerInHouseActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerInHouseActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerInHouse_Move;
        public InputAction @Interact => m_Wrapper.m_PlayerInHouse_Interact;
        public InputAction @InteractAlternate => m_Wrapper.m_PlayerInHouse_InteractAlternate;
        public InputAction @Dash => m_Wrapper.m_PlayerInHouse_Dash;
        public InputAction @Pause => m_Wrapper.m_PlayerInHouse_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInHouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInHouseActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInHouseActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInHouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInHouseActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @InteractAlternate.started += instance.OnInteractAlternate;
            @InteractAlternate.performed += instance.OnInteractAlternate;
            @InteractAlternate.canceled += instance.OnInteractAlternate;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayerInHouseActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @InteractAlternate.started -= instance.OnInteractAlternate;
            @InteractAlternate.performed -= instance.OnInteractAlternate;
            @InteractAlternate.canceled -= instance.OnInteractAlternate;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayerInHouseActions instance)
        {
            if (m_Wrapper.m_PlayerInHouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInHouseActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInHouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInHouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInHouseActions @PlayerInHouse => new PlayerInHouseActions(this);

    // PlayerHitMinigame
    private readonly InputActionMap m_PlayerHitMinigame;
    private List<IPlayerHitMinigameActions> m_PlayerHitMinigameActionsCallbackInterfaces = new List<IPlayerHitMinigameActions>();
    private readonly InputAction m_PlayerHitMinigame_Hit1;
    private readonly InputAction m_PlayerHitMinigame_Hit2;
    private readonly InputAction m_PlayerHitMinigame_Hit3;
    private readonly InputAction m_PlayerHitMinigame_Hit4;
    public struct PlayerHitMinigameActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerHitMinigameActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hit1 => m_Wrapper.m_PlayerHitMinigame_Hit1;
        public InputAction @Hit2 => m_Wrapper.m_PlayerHitMinigame_Hit2;
        public InputAction @Hit3 => m_Wrapper.m_PlayerHitMinigame_Hit3;
        public InputAction @Hit4 => m_Wrapper.m_PlayerHitMinigame_Hit4;
        public InputActionMap Get() { return m_Wrapper.m_PlayerHitMinigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerHitMinigameActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerHitMinigameActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerHitMinigameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerHitMinigameActionsCallbackInterfaces.Add(instance);
            @Hit1.started += instance.OnHit1;
            @Hit1.performed += instance.OnHit1;
            @Hit1.canceled += instance.OnHit1;
            @Hit2.started += instance.OnHit2;
            @Hit2.performed += instance.OnHit2;
            @Hit2.canceled += instance.OnHit2;
            @Hit3.started += instance.OnHit3;
            @Hit3.performed += instance.OnHit3;
            @Hit3.canceled += instance.OnHit3;
            @Hit4.started += instance.OnHit4;
            @Hit4.performed += instance.OnHit4;
            @Hit4.canceled += instance.OnHit4;
        }

        private void UnregisterCallbacks(IPlayerHitMinigameActions instance)
        {
            @Hit1.started -= instance.OnHit1;
            @Hit1.performed -= instance.OnHit1;
            @Hit1.canceled -= instance.OnHit1;
            @Hit2.started -= instance.OnHit2;
            @Hit2.performed -= instance.OnHit2;
            @Hit2.canceled -= instance.OnHit2;
            @Hit3.started -= instance.OnHit3;
            @Hit3.performed -= instance.OnHit3;
            @Hit3.canceled -= instance.OnHit3;
            @Hit4.started -= instance.OnHit4;
            @Hit4.performed -= instance.OnHit4;
            @Hit4.canceled -= instance.OnHit4;
        }

        public void RemoveCallbacks(IPlayerHitMinigameActions instance)
        {
            if (m_Wrapper.m_PlayerHitMinigameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerHitMinigameActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerHitMinigameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerHitMinigameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerHitMinigameActions @PlayerHitMinigame => new PlayerHitMinigameActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerOutSideActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPlayerInHouseActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInteractAlternate(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPlayerHitMinigameActions
    {
        void OnHit1(InputAction.CallbackContext context);
        void OnHit2(InputAction.CallbackContext context);
        void OnHit3(InputAction.CallbackContext context);
        void OnHit4(InputAction.CallbackContext context);
    }
}
